/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.WorkAreas.AdminRole;


import info5100.university.example.College.College;
import info5100.university.example.Department.Department;
import info5100.university.example.Persona.AdminDirectory;
import info5100.university.example.Persona.AdminProfile;
import info5100.university.example.Persona.Faculty.FacultyDirectory;
import info5100.university.example.Persona.Faculty.FacultyProfile;
import info5100.university.example.Persona.Faculty.UserAccountDirectory;
import info5100.university.example.Persona.Person;
import info5100.university.example.Persona.PersonDirectory;
import info5100.university.example.Persona.StudentDirectory;
import info5100.university.example.Persona.StudentProfile;
import info5100.university.example.Persona.UserAccount;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author kal bugrara
 */
public class ManageFacultyJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageSuppliersJPanel
     */
    JPanel CardSequencePanel;
    Department department;
    College college;
    //UserAccount selecteduseraccount;


    public ManageFacultyJPanel(College cc, Department dd, JPanel jp) {
        CardSequencePanel = jp;
        college = cc;
        department = dd;
        initComponents();
        //populateRoleCombo();
        refreshTable();

    }

    public void refreshTable() {

//clear supplier table
        int rc = tblFaculty.getRowCount();
        int i;
        for (i = rc - 1; i >= 0; i--) {
            ((DefaultTableModel) tblFaculty.getModel()).removeRow(i);
        }



        FacultyDirectory fd = department.getFacultydirectory();

       

        for (FacultyProfile fp : fd.getTeacherlist()) {
            Person faculty = fp.getPerson();
            Object[] row = new Object[6];
            row[0] = faculty;
            row[1] = faculty.getName(); //complete this..
            row[2] = fp.getDepartment();
            row[3] = faculty.getEmail();
            row[4] = faculty.getPhone();
            row[5] = faculty.getAddress();

            ((DefaultTableModel) tblFaculty.getModel()).addRow(row);
        }

    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnBack = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblFaculty = new javax.swing.JTable();
        btnView = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        searchBoxID = new javax.swing.JTextField();
        btnSearchID = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        searchBoxName = new javax.swing.JTextField();
        btnSearchName = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        searchBoxDepartment = new javax.swing.JTextField();
        btnSearchDepartment = new javax.swing.JButton();

        setLayout(null);

        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack);
        btnBack.setBounds(40, 20, 80, 23);

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        add(btnDelete);
        btnDelete.setBounds(250, 550, 80, 23);

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel1.setText("Faculty Records");
        add(jLabel1);
        jLabel1.setBounds(30, 50, 190, 17);

        jLabel2.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        jLabel2.setText("Manage Faculty Records");
        add(jLabel2);
        jLabel2.setBounds(170, 20, 280, 28);

        tblFaculty.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Department", "Email", "Phone", "Address"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblFaculty.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tblFacultyMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(tblFaculty);

        add(jScrollPane1);
        jScrollPane1.setBounds(30, 70, 1030, 460);

        btnView.setText("View");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });
        add(btnView);
        btnView.setBounds(30, 550, 78, 23);

        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });
        add(btnRefresh);
        btnRefresh.setBounds(140, 550, 75, 23);

        jLabel3.setText("Seach by ID");
        add(jLabel3);
        jLabel3.setBounds(30, 590, 71, 17);

        searchBoxID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBoxIDActionPerformed(evt);
            }
        });
        add(searchBoxID);
        searchBoxID.setBounds(210, 590, 270, 23);

        btnSearchID.setText("Search ID");
        btnSearchID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchIDActionPerformed(evt);
            }
        });
        add(btnSearchID);
        btnSearchID.setBounds(510, 590, 150, 23);

        jLabel4.setText("Seach by Name");
        add(jLabel4);
        jLabel4.setBounds(30, 630, 93, 17);

        searchBoxName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBoxNameActionPerformed(evt);
            }
        });
        add(searchBoxName);
        searchBoxName.setBounds(210, 630, 270, 23);

        btnSearchName.setText("Search Name");
        btnSearchName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchNameActionPerformed(evt);
            }
        });
        add(btnSearchName);
        btnSearchName.setBounds(510, 630, 150, 23);

        jLabel5.setText("Seach by Department");
        add(jLabel5);
        jLabel5.setBounds(30, 670, 150, 17);

        searchBoxDepartment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBoxDepartmentActionPerformed(evt);
            }
        });
        add(searchBoxDepartment);
        searchBoxDepartment.setBounds(210, 670, 270, 23);

        btnSearchDepartment.setText("Search Department");
        btnSearchDepartment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchDepartmentActionPerformed(evt);
            }
        });
        add(btnSearchDepartment);
        btnSearchDepartment.setBounds(510, 670, 150, 23);
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        //CardSequencePanel.remove(this);
        //((java.awt.CardLayout) CardSequencePanel.getLayout()).next(CardSequencePanel);
 //       ((java.awt.CardLayout)CardSequencePanel.getLayout()).show(CardSequencePanel, "IdentifyEventTypes");
        ((java.awt.CardLayout) CardSequencePanel.getLayout()).show(CardSequencePanel, "Admin");
        CardSequencePanel.revalidate();
        CardSequencePanel.repaint();

    }//GEN-LAST:event_btnBackActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblFaculty.getSelectedRow();
        if (selectedRow >= 0) {
            int dialogButton = JOptionPane.YES_NO_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog(null, "You sure you want to delete this faculty?", "Warning", dialogButton);
            if (dialogResult == JOptionPane.YES_OPTION) {
                Person selectedFaculty = (Person) tblFaculty.getValueAt(selectedRow, 0);
                FacultyProfile selectedFacultyProfile = department.getFacultydirectory().findTeachingFaculty(selectedFaculty.getPersonId());
                department.getFacultydirectory().deleteFaculty(selectedFacultyProfile);
                JOptionPane.showMessageDialog(null, "Faculty successfully deleted!", "Information", JOptionPane.INFORMATION_MESSAGE);
            }
        }
        else {
            JOptionPane.showMessageDialog(null, "Please select a faculty from the list", "Warning", JOptionPane.WARNING_MESSAGE);
        }
        refreshTable();

    }//GEN-LAST:event_btnDeleteActionPerformed

    private void tblFacultyMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblFacultyMousePressed
        // Extracts the row (uaser account) in the table that is selected by the user
//        int siztblFacultyable.getRowCount();
//        int selectedrotblFacultyable.getSelectionModel().getLeadSelectionIndex();
//
//        if (selectedrow < 0 || selectedrow > size - 1) {
//            return;
//        }
//        selecteduseraccount = (UserAccoutblFacultyable.getValueAt(selectedrow, 0);
//        if (selecteduseraccount == null) {
//            return;
//        }
        
            
    }//GEN-LAST:event_tblFacultyMousePressed

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblFaculty.getSelectedRow();
        if (selectedRow >= 0) {
            Person selectedFaculty = (Person) tblFaculty.getValueAt(selectedRow, 0);
            FacultyProfile selectedFacultyProfile = department.getFacultydirectory().findTeachingFaculty(selectedFaculty.getPersonId());
            ViewFacultyJPanel vf = new ViewFacultyJPanel(CardSequencePanel, college, department, selectedFacultyProfile);

            CardSequencePanel.add("ViewFacultyJPanel", vf);
            //((java.awt.CardLayout) CardSequencePanel.getLayout()).next(CardSequencePanel);
            ((java.awt.CardLayout) CardSequencePanel.getLayout()).show(CardSequencePanel, "ViewFacultyJPanel");
            CardSequencePanel.revalidate();
            CardSequencePanel.repaint();
        }
        else {
            JOptionPane.showMessageDialog(null, "Please select a faculty from the list", "Warning", JOptionPane.WARNING_MESSAGE);
        }
        
    }//GEN-LAST:event_btnViewActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        // TODO add your handling code here:
        refreshTable();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void searchBoxIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBoxIDActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_searchBoxIDActionPerformed

    private void btnSearchIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchIDActionPerformed
        // TODO add your handling code here:
        if (!searchBoxID.getText().isBlank()){
            String facultyID = searchBoxID.getText();
            FacultyProfile foundFaculty = department.getFacultydirectory().findTeachingFaculty(facultyID);
            if (foundFaculty != null) {
                populateFacultyByID(foundFaculty);
            }
            else {
                JOptionPane.showMessageDialog(null, "Faculty not found! Please try again!", "Warning", JOptionPane.WARNING_MESSAGE);
                clearTable();
            }
        }
        else {
            JOptionPane.showMessageDialog(null, "Please type in the ID of the faculty.", "Warning", JOptionPane.WARNING_MESSAGE);
            clearTable();
        }
    }//GEN-LAST:event_btnSearchIDActionPerformed

    private void searchBoxNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBoxNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchBoxNameActionPerformed

    private void btnSearchNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchNameActionPerformed
        // TODO add your handling code here:
        if (!searchBoxName.getText().isBlank()){
            String facultyName = searchBoxName.getText();
            ArrayList<FacultyProfile> foundFaculty = department.getFacultydirectory().searchFacultyByName(facultyName);
            if (foundFaculty != null) {
                populateFacultyByName(foundFaculty);
            }
            else {
                JOptionPane.showMessageDialog(null, "Faculty not found! Please try again!", "Warning", JOptionPane.WARNING_MESSAGE);
                clearTable();
            }
        }
        else {
            JOptionPane.showMessageDialog(null, "Please type in a faculty's name", "Warning", JOptionPane.WARNING_MESSAGE);
            clearTable();
        }
    }//GEN-LAST:event_btnSearchNameActionPerformed

    private void searchBoxDepartmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBoxDepartmentActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchBoxDepartmentActionPerformed

    private void btnSearchDepartmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchDepartmentActionPerformed
        // TODO add your handling code here:
        if (!searchBoxDepartment.getText().isBlank()){
            String departmentName = searchBoxDepartment.getText();
            Department foundDepartment = college.findDepartment(departmentName);
            if (foundDepartment != null) {
                //System.out.println("Department found! " + departmentName);
                populateFacultyByDepartment(foundDepartment);
            }
            else {
                JOptionPane.showMessageDialog(null, "Department not found! Please try again!", "Warning", JOptionPane.WARNING_MESSAGE);
                clearTable();
            }
        }
        else {
            JOptionPane.showMessageDialog(null, "Please type in a department", "Warning", JOptionPane.WARNING_MESSAGE);
            clearTable();
        }
    }//GEN-LAST:event_btnSearchDepartmentActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSearchDepartment;
    private javax.swing.JButton btnSearchID;
    private javax.swing.JButton btnSearchName;
    private javax.swing.JButton btnView;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField searchBoxDepartment;
    private javax.swing.JTextField searchBoxID;
    private javax.swing.JTextField searchBoxName;
    private javax.swing.JTable tblFaculty;
    // End of variables declaration//GEN-END:variables
    
public void populateFacultyByID(FacultyProfile faculty) {
        DefaultTableModel model1 = (DefaultTableModel) tblFaculty.getModel();
        model1.setRowCount(0);
        Object[] row = new Object[6];
        Person facultyID = faculty.getPerson();
        row[0] = facultyID;
        row[1] = facultyID.getName();
        row[2] = faculty.getDepartment();
        row[3] = facultyID.getEmail();
        row[4] = facultyID.getPhone();
        row[5] = facultyID.getAddress();
        model1.addRow(row);
    }
    
    public void populateFacultyByName(ArrayList<FacultyProfile> foundFaculty) {
        DefaultTableModel model1 = (DefaultTableModel) tblFaculty.getModel();
        model1.setRowCount(0);
        for (FacultyProfile fp: foundFaculty) {
            Object[] row = new Object[6];
            Person faculty = fp.getPerson();
            row[0] = faculty;
            row[1] = faculty.getName();
            row[2] = fp.getDepartment();
            row[3] = faculty.getEmail();
            row[4] = faculty.getPhone();
            row[5] = faculty.getAddress();
            model1.addRow(row);
        }         
    }
    
    public void populateFacultyByDepartment(Department foundDepartment) {
        DefaultTableModel model1 = (DefaultTableModel) tblFaculty.getModel();
        model1.setRowCount(0);
        
        for (FacultyProfile fp: foundDepartment.getFacultydirectory().getTeacherlist()) {
            Object[] row = new Object[6];
            Person faculty = fp.getPerson();
            row[0] = faculty;
            row[1] = faculty.getName();
            row[2] = fp.getDepartment();
            row[3] = faculty.getEmail();
            row[4] = faculty.getPhone();
            row[5] = faculty.getAddress();
            model1.addRow(row);
        }
    }
    
    public void clearTable() {
        DefaultTableModel model1 = (DefaultTableModel) tblFaculty.getModel();
        model1.setRowCount(0);
    }
}

